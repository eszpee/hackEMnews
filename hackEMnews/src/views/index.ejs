<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <style>
    body {
      padding-top: 20px;
      padding-bottom: 40px;
      background-color: #f8f9fa;
    }
    .article-card {
      margin-bottom: 20px;
      transition: transform 0.2s;
    }
    .article-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 20px rgba(0,0,0,0.1);
    }
    .article-title {
      color: #333;
      text-decoration: none;
      font-weight: bold;
    }
    .article-title:hover {
      text-decoration: underline;
    }
    .article-summary {
      color: #666;
      font-size: 0.9rem;
    }
    .loading {
      text-align: center;
      padding: 2rem;
    }
    .header {
      margin-bottom: 2rem;
      border-bottom: 1px solid #dee2e6;
      padding-bottom: 1rem;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <div class="row">
        <div class="col-md-12">
          <h1 class="text-center">ðŸ“š HackEM News</h1>
          <p class="text-center text-muted">Top Engineering Management articles from various sources</p>
          <div class="text-center mb-3">
            <button id="clear-cache-btn" class="btn btn-sm btn-outline-secondary">Clear Cache</button>
          </div>
        </div>
      </div>
    </div>
    
    <div class="row">
      <div class="col-md-12">
        <div id="loading" class="loading">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
          <p class="mt-2">Fetching articles from sources...</p>
          <p class="text-muted small">This may take a moment as we're using AI to filter for Engineering Management relevance.</p>
        </div>
        
        <div id="articles-container" class="row" style="display: none;">
          <!-- Articles will be loaded here -->
        </div>
        
        <div id="error-message" style="display: none;" class="alert alert-danger mt-3">
          An error occurred while fetching articles. Please try again later.
        </div>
      </div>
    </div>
  </div>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const articlesContainer = document.getElementById('articles-container');
      const loadingElement = document.getElementById('loading');
      const errorElement = document.getElementById('error-message');
      const clearCacheBtn = document.getElementById('clear-cache-btn');
      
      // Load articles on page load
      loadArticles();
      
      // Set up clear cache button
      clearCacheBtn.addEventListener('click', async function() {
        try {
          clearCacheBtn.disabled = true;
          clearCacheBtn.textContent = 'Clearing...';
          
          const response = await fetch('/api/clear-cache', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          });
          
          if (!response.ok) {
            throw new Error('Failed to clear cache');
          }
          
          const result = await response.json();
          console.log('Cache cleared:', result);
          
          // Show success message
          alert(`Cache cleared successfully! Refreshing articles...`);
          
          // Reset UI and reload articles
          articlesContainer.innerHTML = '';
          articlesContainer.style.display = 'none';
          loadingElement.style.display = 'block';
          errorElement.style.display = 'none';
          
          // Reload articles
          loadArticles();
        } catch (error) {
          console.error('Error clearing cache:', error);
          alert('Failed to clear cache. See console for details.');
        } finally {
          clearCacheBtn.disabled = false;
          clearCacheBtn.textContent = 'Clear Cache';
        }
      });
      
      // Function to load articles
      async function loadArticles() {
        try {
          // Fetch top EM stories
          const response = await fetch('/api/top-em-stories');
          
          if (!response.ok) {
            throw new Error('Failed to fetch articles');
          }
          
          const articles = await response.json();
          console.log('Received articles:', articles);
          
          if (!articles || articles.length === 0) {
            console.log('No articles found or empty array received');
            articlesContainer.innerHTML = `
              <div class="col-12">
                <div class="alert alert-info">
                  <h4 class="alert-heading">No Relevant Articles Found</h4>
                  <p>We couldn't find any Engineering Management articles that meet our relevance threshold (50%).</p>
                  <hr>
                  <p class="mb-0">Try clearing the cache to fetch fresh articles from our sources, or check back later.</p>
                </div>
              </div>
            `;
          } else {
            console.log(`Displaying ${articles.length} articles`);
            
            // Clear previous articles
            articlesContainer.innerHTML = '';
            
            // Render each article
            articles.forEach(article => {
              const card = document.createElement('div');
              card.className = 'col-md-6';
              card.innerHTML = `
                <div class="card article-card">
                  <div class="card-body">
                    <h5 class="card-title">
                      <a href="${article.url}" class="article-title" target="_blank" rel="noopener">
                        ${article.title}
                      </a>
                    </h5>
                    <p class="card-text article-summary">${article.summary}</p>
                    <div class="d-flex justify-content-between">
                      <small class="text-muted">${article.source === 'reddit' ? 'Reddit' : 'HN'} Score: ${article.score || 'N/A'}</small>
                      <small class="text-muted">${article.source === 'reddit' ? 'Subreddit: r/' + article.subreddit : 'Comments: ' + (article.descendants || 0)}</small>
                      ${article.relevanceScore ? 
                        `<small class="text-muted fw-bold">Relevance: ${(article.relevanceScore * 100).toFixed(0)}%</small>` : 
                        ''}
                    </div>
                  </div>
                </div>
              `;
              articlesContainer.appendChild(card);
            });
          }
          
          // Hide loading and show articles
          loadingElement.style.display = 'none';
          articlesContainer.style.display = 'flex';
        } catch (error) {
          console.error('Error fetching articles:', error);
          loadingElement.style.display = 'none';
          errorElement.style.display = 'block';
        }
      }
    });
  </script>
</body>
</html>